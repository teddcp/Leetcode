One Solution
========================

      class MyCircularQueue:

          def __init__(self, k: int):
              """
              Initialize your data structure here. Set the size of the queue to be k.
              """
              self.arr=[]
              self.limit=k
              self.sz=0
              self.front=self.rear=-1


          def enQueue(self, value: int) -> bool:
              """
              Insert an element into the circular queue. Return true if the operation is successful.
              """
              if self.isFull():
                  return False

              if self.front== -1 :
                  self.front=self.rear=0

              self.arr.append(value)
              self.rear=self.sz
              self.sz+=1

              return True



          def deQueue(self) -> bool:
              """
              Delete an element from the circular queue. Return true if the operation is successful.
              """
              if self.isEmpty():
                  return False

              self.arr.pop(self.front)
              self.sz-=1

              if self.sz==0:
                  self.front=self.rear=-1
              else:
                  self.rear=self.sz-1
              return True

          def Front(self) -> int:
              """
              Get the front item from the queue.
              """
              if self.front == -1:
                  return -1

              return self.arr[self.front]


          def Rear(self) -> int:
              """
              Get the last item from the queue.
              """
              if self.rear == -1:
                  return -1

              return self.arr[self.rear]


          def isEmpty(self) -> bool:
              """
              Checks whether the circular queue is empty or not.
              """
              return self.sz <= 0


          def isFull(self) -> bool:
              """
              Checks whether the circular queue is full or not.
              """
              return self.sz >= self.limit


Second Solution
===========================

        class MyCircularQueue:

            def __init__(self, k: int):
                """
                Initialize your data structure here. Set the size of the queue to be k.
                """
                self.arr=[None]*k
                self.sz=k
                self.front=self.rear=-1


            def enQueue(self, value: int) -> bool:
                """
                Insert an element into the circular queue. Return true if the operation is successful.
                """
                if self.isFull():
                    return False

                if self.isEmpty() :
                    self.front=self.rear=0
                else:
                    self.rear= (self.rear+1) % self.sz

                self.arr[self.rear]= value

                return True



            def deQueue(self) -> bool:
                """
                Delete an element from the circular queue. Return true if the operation is successful.
                """
                if self.isEmpty():
                    return False

                data=self.arr[self.front]

                if self.front == self.rear :
                    self.front=self.rear=-1

                else :
                    self.front= (self.front+1) % self.sz

                return True

            def Front(self) -> int:
                """
                Get the front item from the queue.
                """
                if self.front == -1:
                    return -1

                return self.arr[self.front]


            def Rear(self) -> int:
                """
                Get the last item from the queue.
                """
                if self.rear == -1:
                    return -1

                return self.arr[self.rear]


            def isEmpty(self) -> bool:
                """
                Checks whether the circular queue is empty or not.
                """
                return self.front == -1


            def isFull(self) -> bool:
                """
                Checks whether the circular queue is full or not.
                """
                return ( (self.rear+1)% self.sz ) == self.front
