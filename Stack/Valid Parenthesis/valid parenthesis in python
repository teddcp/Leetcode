Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Note that an empty string is also considered valid.

https://leetcode.com/explore/learn/card/queue-stack/230/usage-stack/1361/


Approach 1
================
class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        if s=='':
            return True
        
        stk=[]
        #valid=True
        d={'(':')','{':'}','[':']'}
        
        for i in s:
            
            if i in d:
                stk.append(i)
            
            else:
                if not stk or d[stk.pop()] != i:
                    return False
                
        if stk:
            return False
            
        return True
            
https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/ 

    
T.c - o(n)
s.c - o(n)    
        
==============================
Approach 2
=====================

class Solution(object):
    def isValid(self, s):
        """
        :type s: str
        :rtype: bool
        """
        n = len(s)
        
        if n == 0:
            return True
        
        if n % 2 != 0:
            return False
            
        while '()' in s or '{}' in s or '[]' in s:
            s = s.replace('{}','').replace('()','').replace('[]','')
        
        return not len(s)
            
    
T.c - o(n^2)
s.c - o(1) 

Consider this case where the s = {{{}}}
Replace function will replace only one set {} at a time. Replace itself takes O(N) time because it will have to search the entire string. On top of this, we have while loop which runs for O(N/2) times.
So O(N) * O(N/2) results in O(N^2)
